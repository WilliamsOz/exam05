Assignment name  : cpp_module_00
Expected files   : Warlock.cpp Warlock.hpp
--------------------------------------------------------------------------------

Creer une classe Warlock.
Elle doit etre de forme coplienne :
_Constructeur par defaut
_Constructeur par copie
_Destructeur
_Operateur d'affectation =

Elle a les attributs privee suivant :
* name (string)
* title (string)
#include <string>

Puisqu'ils sont privés, vous écrirez les getters suivants :
* getName, returns a reference to constant string
* getTitle, returns a reference to constant string

Ces deux fonctions devront pouvoir être appelées sur un Warlock constant.

Creer le setter suivant ;
* setTitle, returns void and takes a reference to constant string

Votre Warlock aura aussi, en plus de tout ce qui est requis par la forme
Coplienne, un constructeur qui prend, dans l'ordre, son nom et un titre.
Votre Warlock ne pourra pas etre copier, instancier par copie ou instantier
sans nom et titre.

For example :

Warlock bob;                            //Does not compile
Warlock bob("Bob", "the magnificent");  //Compiles
Warlock jim("Jim", "the nauseating");   //Compiles
bob = jim;                              //Does not compile
Warlock jack(jim);                      //Does not compile

Upon creation, the Warlock says :

<NAME>: This looks like another boring day.

Of course, whenever we use placeholders like <NAME>, <TITLE>, etc...
in outputs, you will replace them by the appropriate value. Without the < and >.

When he dies, he says:

<NAME>: My job here is done!

Our Warlock must also be able to introduce himself, while boasting with all its
might.

So you will write the following function:
* void introduce() const;

It must display:

<NAME>: I am <NAME>, <TITLE>!

Here's an example of a test main function and its associated output:

int main()
{
  Warlock const richard("Richard", "Mistress of Magma");
  richard.introduce();
  std::cout << richard.getName() << " - " << richard.getTitle() << std::endl;

  Warlock* jack = new Warlock("Jack", "the Long");
  jack->introduce();
  jack->setTitle("the Mighty");
  jack->introduce();

  delete jack;

  return (0);
}

~$ ./a.out | cat -e
Richard: This looks like another boring day.$
Richard: I am Richard, Mistress of Magma!$
Richard - Mistress of Magma$
Jack: This looks like another boring day.$
Jack: I am Jack, the Long!$
Jack: I am Jack, the Mighty!$
Jack: My job here is done!$
Richard: My job here is done!$
~$
